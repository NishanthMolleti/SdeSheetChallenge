long long merge(long long *arr,long long *temp,int left ,int mid ,int right){
    int i=left,j=mid,k=left,inversions=0;
    while((i<=mid-1)&&(j<=right)){
        if(arr[i]<=arr[j]){
            temp[k++]=arr[i++];
        }
        else{
            temp[k++]=arr[j++];
            inversions+=(mid-i);
        }
    }
    while(i<=mid-1)temp[k++]=arr[i++];
    while(j<=right)temp[k++]=arr[j++];
    for(i=left;i<=right;i++)arr[i]=temp[i];
    return inversions;
}
long long merge_sort(long long *arr,long long *temp,int left,int right){
    int mid;
    long long inversions=0;
    if(right>left){
        mid=(left+right)/2;
        inversions+=merge_sort(arr,temp,left,mid);
        inversions+=merge_sort(arr,temp,mid+1,right);
        inversions+=merge(arr,temp,left,mid+1,right);
    }
    return inversions;
}
long long getInversions(long long *arr, int n){
    long long temp[n];
    long long inversions=0;
    inversions=merge_sort(arr,temp,0,n-1);
    return inversions;
}
